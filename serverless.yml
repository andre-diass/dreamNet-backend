service: serverlessBackend

provider:
  environment: ${file(./envs/.env.${opt:stage, 'lcl'}.js)}
  name: aws
  runtime: nodejs18.x
  region: us-west-1
  stage: "${opt:stage, 'lcl'}"
  timeout: 30
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [FilaAcessos, Arn]
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [FilaEmail, Arn]

resources:
  Resources:
    FilaAcessos:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: acesso.fifo
        FifoQueue: true
        SqsManagedSseEnabled: false
        RedrivePolicy:
          deadletterTargetArn:
            Fn::GetAtt:
              - DlqAcessos
              - Arn
          maxReceiveCount: 5
        VisibilityTimeout: 10

    FilaEmail:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: filaemail.fifo
        FifoQueue: true
        SqsManagedSseEnabled: false
        VisibilityTimeout: 10

    DlqAcessos:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: acesso-dlq.fifo
        FifoQueue: true
        SqsManagedSseEnabled: false
        MessageRetentionPeriod: 86400
functions:
  # authorize:
  #   handler: src/functions/users/authorize.handler
  getProducts:
    handler: src/functions/products/getProducts.handler
    events:
      - http:
          path: serverless/getProducts
          method: get

  getProduct:
    handler: src/functions/products/getProduct.handler
    events:
      - http:
          path: serverless/getProduct
          method: get

  createProduct:
    handler: src/functions/products/createProduct.handler
    events:
      - http:
          path: serverless/createProduct
          method: post

  updateProduct:
    handler: src/functions/products/updateProduct.handler
    events:
      - http:
          path: serverless/updateProduct
          method: put

  deleteProduct:
    handler: src/functions/products/deleteProduct.handler
    events:
      - http:
          path: serverless/deleteProduct
          method: delete

  addCategory:
    handler: src/functions/categories/addCategory.handler
    events:
      - http:
          path: serverless/addCategory
          method: post

  getCategories:
    handler: src/functions/categories/getCategories.handler
    events:
      - http:
          path: serverless/getCategories/{userId}
          method: get

  updateCategory:
    handler: src/functions/categories/updateCategory.handler
    events:
      - http:
          path: serverless/updateCategory/{categoryId}
          method: put

  deleteCategory:
    handler: src/functions/categories/deleteCategory.handler
    events:
      - http:
          path: serverless/deleteCategory/{categoryId}
          method: delete
  login:
    handler: src/functions/users/login.handler
    events:
      - http:
          path: serverless/login
          method: post
  getUser:
    handler: src/functions/users/getUser.handler
    events:
      - http:
          path: serverless/user/{email}
          method: get
  acessoConsumer:
    handler: src/functions/consumers/acessoConsumer.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - FilaAcessos
              - Arn
          batchSize: 1
    timeout: 2

# Serverless plugins
plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-s3-local
